version: '2.1'
services:
  auth-proxy:
    image: mwangxx/auth-proxy:latest
    container_name: auth-proxy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend

  frontend:
    image: mwangxx/bulletjournal-frontend:latest
    container_name: react_app
    ports:
      - "3000:3000"
    depends_on:
      - controller

  controller:
    image: mwangxx/bulletjournal-backend:latest
    container_name: springboot_app
    ports:
      - "8080:8080"
    environment:
      spring_profiles_active: dev
    volumes:
      - $HOME/docker/volumes/log:/var/log
    depends_on:
      database:
        condition: service_healthy

  daemon:
    image: zywangzy/bulletjournal-daemon:latest
    container_name: daemon_app
    ports:
      - "50051:50051"
    depends_on:
      cache:
        condition: service_started
      database:
        condition: service_healthy

  cache:
    image: mwangxx/redis:5.0.8
    container_name: cache
    ports:
      - "127.0.0.1:6379:6379"

  database:
    image: mwangxx/postgres:12.2-2
    container_name: db
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: postgres
    volumes:
      - $HOME/docker/volumes/postgres:/var/lib/postgresql/data
      - $HOME/docker/volumes/db_backup:/var/db_backup
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
