input{
	jdbc {
        	# Postgres jdbc connection string to our database, mydb
        	jdbc_connection_string => "jdbc:postgresql://${postgres_hostname}:5432/postgres"
        	# The user we wish to execute our statement as
        	jdbc_user => "postgres"
		  	jdbc_password => "docker"
        	# The path to our downloaded jdbc driver
        	jdbc_driver_library => "${postgres_jdbc_driver_absolute_path}"
			last_run_metadata_path => "${logstash_last_run_metadata_absolute_path}"
        	# The name of the driver class for Postgresql
        	jdbc_driver_class => "org.postgresql.Driver"
			jdbc_paging_enabled => true
			#tracking update time
			tracking_column => "unix_ts_in_secs"
			use_column_value => true
			tracking_column_type => "numeric"
			schedule => "*/30 * * * * *"
			type => "note"
	        # DB query
	        statement => "SELECT notes.id, notes.NAME AS value, notes.project_id, Extract(epoch FROM notes.updated_at) AS unix_ts_in_secs FROM notes WHERE ( Extract(epoch FROM notes.updated_at) > :sql_last_value AND notes.updated_at < Now() at time zone 'utc' ) ORDER BY notes.updated_at ASC"
	}

	jdbc {
	        # Postgres jdbc connection string to our database, mydb
	        jdbc_connection_string => "jdbc:postgresql://${postgres_hostname}:5432/postgres"
	        # The user we wish to execute our statement as
	        jdbc_user => "postgres"
			jdbc_password => "docker"
	        # The path to our downloaded jdbc driver
	        jdbc_driver_library => "${postgres_jdbc_driver_absolute_path}"
			last_run_metadata_path => "${logstash_last_run_metadata_absolute_path}"
	        # The name of the driver class for Postgresql
	        jdbc_driver_class => "org.postgresql.Driver"
			jdbc_paging_enabled => true
			#tracking update time
			tracking_column => "unix_ts_in_secs"
			use_column_value => true
			tracking_column_type => "numeric"
			schedule => "*/30 * * * * *"
			type => "transaction"
	        # DB query
	        statement => "SELECT transactions.id, transactions.NAME AS value, transactions.project_id, Extract(epoch FROM transactions.updated_at) AS unix_ts_in_secs FROM transactions WHERE ( Extract(epoch FROM transactions.updated_at) > :sql_last_value AND transactions.updated_at < Now() at time zone 'utc' ) ORDER BY transactions.updated_at ASC"
	}

	jdbc {
        	# Postgres jdbc connection string to our database, mydb
        	jdbc_connection_string => "jdbc:postgresql://${postgres_hostname}:5432/postgres"
	        # The user we wish to execute our statement as
	        jdbc_user => "postgres"
			jdbc_password => "docker"
	        # The path to our downloaded jdbc driver
	        jdbc_driver_library => "${postgres_jdbc_driver_absolute_path}"
			last_run_metadata_path => "${logstash_last_run_metadata_absolute_path}"
	        # The name of the driver class for Postgresql
	        jdbc_driver_class => "org.postgresql.Driver"
			jdbc_paging_enabled => true
			#tracking update time
			tracking_column => "unix_ts_in_secs"
			use_column_value => true
			tracking_column_type => "numeric"
			schedule => "*/30 * * * * *"
			type => "task"
	        # DB query
	        statement =>"SELECT tasks.id, tasks.NAME AS value, tasks.project_id, Extract(epoch FROM tasks.updated_at) AS unix_ts_in_secs FROM tasks WHERE ( Extract(epoch FROM tasks.updated_at) > :sql_last_value AND tasks.updated_at < Now() at time zone 'utc' ) ORDER BY tasks.updated_at ASC"
    }
	jdbc {
        	# Postgres jdbc connection string to our database, mydb
        	jdbc_connection_string => "jdbc:postgresql://${postgres_hostname}:5432/postgres"
	        # The user we wish to execute our statement as
	        jdbc_user => "postgres"
			jdbc_password => "docker"
	        # The path to our downloaded jdbc driver
	        jdbc_driver_library => "${postgres_jdbc_driver_absolute_path}"
			last_run_metadata_path => "${logstash_last_run_metadata_absolute_path}"
	        # The name of the driver class for Postgresql
	        jdbc_driver_class => "org.postgresql.Driver"
			jdbc_paging_enabled => true
			#tracking update time
			tracking_column => "unix_ts_in_secs"
			use_column_value => true
			tracking_column_type => "numeric"
			schedule => "*/30 * * * * *"
			type => "note_content"
	        # DB query
	        statement =>"SELECT note_contents_matview.id, note_contents_matview.value, note_contents_matview.parent_id, note_contents_matview.project_id, note_contents_matview.unix_ts_in_secs FROM note_contents_matview WHERE ( unix_ts_in_secs > :sql_last_value AND updated_at < Now() at time zone 'utc' ) ORDER BY updated_at ASC"
    }
	jdbc {
        	# Postgres jdbc connection string to our database, mydb
        	jdbc_connection_string => "jdbc:postgresql://${postgres_hostname}:5432/postgres"
	        # The user we wish to execute our statement as
	        jdbc_user => "postgres"
			jdbc_password => "docker"
	        # The path to our downloaded jdbc driver
	        jdbc_driver_library => "${postgres_jdbc_driver_absolute_path}"
			last_run_metadata_path => "${logstash_last_run_metadata_absolute_path}"
	        # The name of the driver class for Postgresql
	        jdbc_driver_class => "org.postgresql.Driver"
			jdbc_paging_enabled => true
			#tracking update time
			tracking_column => "unix_ts_in_secs"
			use_column_value => true
			tracking_column_type => "numeric"
			schedule => "*/30 * * * * *"
			type => "task_content"
	        # DB query
	        statement =>"SELECT task_contents_matview.id, task_contents_matview.value, task_contents_matview.parent_id, task_contents_matview.project_id, task_contents_matview.unix_ts_in_secs FROM task_contents_matview WHERE ( unix_ts_in_secs > :sql_last_value AND updated_at < Now() at time zone 'utc' ) ORDER BY updated_at ASC"
    }
	jdbc {
        	# Postgres jdbc connection string to our database, mydb
        	jdbc_connection_string => "jdbc:postgresql://${postgres_hostname}:5432/postgres"
	        # The user we wish to execute our statement as
	        jdbc_user => "postgres"
			jdbc_password => "docker"
	        # The path to our downloaded jdbc driver
	        jdbc_driver_library => "${postgres_jdbc_driver_absolute_path}"
			last_run_metadata_path => "${logstash_last_run_metadata_absolute_path}"
	        # The name of the driver class for Postgresql
	        jdbc_driver_class => "org.postgresql.Driver"
			jdbc_paging_enabled => true
			#tracking update time
			tracking_column => "unix_ts_in_secs"
			use_column_value => true
			tracking_column_type => "numeric"
			schedule => "*/30 * * * * *"
			type => "transaction_content"
	        # DB query
	        statement =>"SELECT transaction_contents_matview.id, transaction_contents_matview.value, transaction_contents_matview.parent_id, transaction_contents_matview.project_id, transaction_contents_matview.unix_ts_in_secs FROM transaction_contents_matview WHERE ( unix_ts_in_secs > :sql_last_value AND updated_at < Now() at time zone 'utc' ) ORDER BY updated_at ASC"
    }
}

filter {
	if [type] == "note" {
    	mutate {
			replace => {"id" => "note@%{[id]}"}
	        rename => { "project_id" => "projectId"}
			copy => { "id" => "[@metadata][_id]"}
			remove_field => ["@version", "unix_ts_in_secs"]
		}
	}

	if [type] == "transaction" {
		mutate {
			replace => {"id" => "transaction@%{[id]}"}
			rename => { "project_id" => "projectId"}
			copy => { "id" => "[@metadata][_id]"}
			remove_field => ["@version", "unix_ts_in_secs"]
		}
	}
	if [type] == "task" {
    	mutate {
			replace => {"id" => "task@%{[id]}"}
			rename => { "project_id" => "projectId"}
			copy => { "id" => "[@metadata][_id]"}
			remove_field => ["@version", "unix_ts_in_secs"]
		}
	}
	if [type] == "note_content" {
	    json {
          source  => "value"
          target => "value"
        }
    	mutate {
    		rename => { "project_id" => "projectId"}
			rename => { "parent_id" => "parentId"}
			replace => {"id" => "note_content@%{[id]}"}
			replace => {"value" => "%{[value][###html###]}"}
			replace => {"parentId" => "note@%{[parentId]}"}
			copy => { "id" => "[@metadata][_id]"}
			remove_field => ["@version", "unix_ts_in_secs"]
		}
	}
	if [type] == "task_content" {
	    json {
                source  => "value"
                target => "value"
        }
    	mutate {
    		rename => { "project_id" => "projectId"}
			rename => { "parent_id" => "parentId"}
			replace => {"id" => "task_content@%{[id]}"}
			replace => {"value" => "%{[value][###html###]}"}
			replace => {"parentId" => "task@%{[parentId]}"}
			copy => { "id" => "[@metadata][_id]"}
			remove_field => ["@version", "unix_ts_in_secs"]
		}
	}
	if [type] == "transaction_content" {
	    json {
            source  => "value"
            target => "value"
        }
    	mutate {
    		rename => { "project_id" => "projectId"}
			rename => { "parent_id" => "parentId"}
			replace => {"id" => "transaction_content@%{[id]}"}
			replace => {"value" => "%{[value][###html###]}"}
			replace => {"parentId" => "transaction@%{[parentId]}"}
			copy => { "id" => "[@metadata][_id]"}
			remove_field => ["@version", "unix_ts_in_secs"]
		}
	}
}

output {
	stdout { codec => json_lines }
	elasticsearch {
		hosts => "${elasticsearch_hostname}:9200"
		user => "elastic"
		password => "changeme"
		index => "project_items"
		document_id => "%{[@metadata][_id]}"
  	}
}


